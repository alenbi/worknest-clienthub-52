
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { Request } from '@/lib/models';

const SUPABASE_URL = "https://xmyqiplgjcaxpnojdxmk.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhteXFpcGxnamNheHBub2pkeG1rIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMyMjQ4MjksImV4cCI6MjA1ODgwMDgyOX0.tzxkW_UrwoRP5P1WI8AtH_L92qXbVRsv8TZK-s3AaFk";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    storage: localStorage
  }
});

// Utility functions for common database operations

// Get client by email - using the new RPC function
export async function getClientByEmail(email: string) {
  if (!email) return null;
  
  try {
    const standardEmail = email.trim().toLowerCase();
    console.log("Getting client by email using RPC:", standardEmail);
    
    const { data, error } = await supabase
      .rpc('get_client_by_email', { email_param: standardEmail });
      
    if (error) {
      console.error("Error getting client by email:", error);
      throw error;
    }
    
    if (data && data.length > 0) {
      return data[0];
    }
    
    return null;
  } catch (error) {
    console.error("Failed to get client by email:", error);
    throw error;
  }
}

// Link existing auth user to client record if needed
export async function linkAuthUserToClient(userId: string, email: string) {
  if (!userId || !email) return null;
  
  try {
    const standardEmail = email.trim().toLowerCase();
    console.log("Linking auth user to client:", userId, standardEmail);
    
    // Find client by email
    const { data: client, error: clientError } = await supabase
      .from('clients')
      .select('*')
      .eq('email', standardEmail)
      .maybeSingle();
      
    if (clientError) {
      console.error("Error finding client by email:", clientError);
      throw clientError;
    }
    
    if (!client) {
      console.error("No client found with email:", standardEmail);
      return null;
    }
    
    // Update client with user_id if not already set
    if (!client.user_id) {
      console.log("Updating client with user_id:", userId);
      
      const { data: updatedClient, error: updateError } = await supabase
        .from('clients')
        .update({ user_id: userId })
        .eq('id', client.id)
        .select('*')
        .single();
        
      if (updateError) {
        console.error("Error updating client with user_id:", updateError);
        throw updateError;
      }
      
      console.log("Client updated successfully:", updatedClient);
      return updatedClient;
    }
    
    return client;
  } catch (error) {
    console.error("Failed to link auth user to client:", error);
    throw error;
  }
}

// New function to fetch all client requests
export async function fetchClientRequests(clientId: string): Promise<Request[]> {
  try {
    console.log("Fetching requests for client:", clientId);
    
    const { data, error } = await supabase
      .rpc('get_client_requests', { client_id_param: clientId });
    
    if (error) {
      console.error("Error fetching client requests:", error);
      throw error;
    }
    
    console.log("Fetched client requests:", data);
    return data || [];
  } catch (error) {
    console.error("Failed to fetch client requests:", error);
    throw error;
  }
}

// New function to create a client request
export async function createClientRequest(clientId: string, title: string, description: string): Promise<Request> {
  try {
    console.log("Creating request for client:", clientId);
    
    const { data, error } = await supabase
      .from('requests')
      .insert([
        { 
          client_id: clientId,
          title,
          description,
          status: 'pending'
        }
      ])
      .select('*')
      .single();
    
    if (error) {
      console.error("Error creating client request:", error);
      throw error;
    }
    
    console.log("Created client request:", data);
    return data;
  } catch (error) {
    console.error("Failed to create client request:", error);
    throw error;
  }
}

// New function to fetch all requests with client info for admin
export async function fetchRequestsWithClientInfo(): Promise<Request[]> {
  try {
    console.log("Fetching all requests with client info");
    
    const { data, error } = await supabase
      .rpc('get_all_requests_with_client_info');
    
    if (error) {
      console.error("Error fetching requests with client info:", error);
      throw error;
    }
    
    console.log("Fetched requests with client info:", data);
    return data || [];
  } catch (error) {
    console.error("Failed to fetch requests with client info:", error);
    throw error;
  }
}

// New function to update request status
export async function updateRequestStatus(requestId: string, status: string): Promise<void> {
  try {
    console.log(`Updating request ${requestId} status to ${status}`);
    
    const { error } = await supabase
      .from('requests')
      .update({ status, updated_at: new Date().toISOString() })
      .eq('id', requestId);
    
    if (error) {
      console.error("Error updating request status:", error);
      throw error;
    }
    
    console.log("Request status updated successfully");
  } catch (error) {
    console.error("Failed to update request status:", error);
    throw error;
  }
}
