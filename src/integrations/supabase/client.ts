// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://xmyqiplgjcaxpnojdxmk.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhteXFpcGxnamNheHBub2pkeG1rIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMyMjQ4MjksImV4cCI6MjA1ODgwMDgyOX0.tzxkW_UrwoRP5P1WI8AtH_L92qXbVRsv8TZK-s3AaFk";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    storage: localStorage
  }
});

// Utility functions for common database operations
export async function fetchRequestsWithClientInfo() {
  try {
    // Use the RPC function to get all requests with client info
    const { data, error } = await supabase
      .rpc('get_all_requests_with_client_info');
    
    if (error) {
      console.error("Error fetching requests:", error);
      throw error;
    }
    
    return data || [];
  } catch (error) {
    console.error("Failed to fetch requests with client info:", error);
    throw error;
  }
}

export async function fetchClientRequests(clientId: string) {
  try {
    console.log("Fetching requests for client ID:", clientId);
    
    // Use the RPC function to get client requests
    const { data, error } = await supabase
      .rpc('get_client_requests', { client_id_param: clientId });
    
    if (error) {
      console.error("Error fetching client requests:", error);
      throw error;
    }
    
    console.log("Fetched client requests:", data);
    return data || [];
  } catch (error) {
    console.error("Failed to fetch client requests:", error);
    throw error;
  }
}

export async function createClientRequest(clientId: string, title: string, description: string) {
  try {
    console.log("Creating request for client ID:", clientId);
    
    const { data, error } = await supabase
      .from('requests')
      .insert({
        client_id: clientId,
        title,
        description,
        status: 'pending',
        updated_at: new Date().toISOString()
      })
      .select('*')
      .single();
    
    if (error) {
      console.error("Error creating client request:", error);
      throw error;
    }
    
    console.log("Created client request:", data);
    return data;
  } catch (error) {
    console.error("Failed to create client request:", error);
    throw error;
  }
}

export async function updateRequestStatus(requestId: string, status: string) {
  try {
    const { data, error } = await supabase
      .from('requests')
      .update({ 
        status,
        updated_at: new Date().toISOString()
      })
      .eq('id', requestId)
      .select('*')
      .single();
    
    if (error) {
      console.error("Error updating request status:", error);
      throw error;
    }
    
    return data;
  } catch (error) {
    console.error("Failed to update request status:", error);
    throw error;
  }
}

// Function to manually create a new client auth user
// This would normally be done by auth admin APIs but Supabase JS client 
// doesn't directly support admin APIs in browser context
export async function createClientAuthUser(email: string, password: string) {
  try {
    console.log("Creating client auth user with email:", email);
    
    const { data, error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: {
          role: 'client' // Add client role metadata
        }
      }
    });
    
    if (error) throw error;
    
    console.log("Client auth user created:", data.user?.id);
    return data;
  } catch (error) {
    console.error("Failed to create client auth user:", error);
    throw error;
  }
}

// Create a client with an authentication user in one operation
export async function createClientWithAuth(name: string, email: string, password: string, company?: string, phone?: string, domain?: string) {
  try {
    console.log("Creating client with auth for:", email);
    
    // First, check if we have admin rights
    const { data: { user } } = await supabase.auth.getUser();
    
    if (!user) {
      throw new Error("You must be logged in as an admin to add clients");
    }
    
    // Check if email already exists
    try {
      const { data: existingUsers, error: checkError } = await supabase
        .from('clients')
        .select('email')
        .eq('email', email.trim().toLowerCase())
        .limit(1);
        
      if (checkError) {
        console.error("Error checking for existing client:", checkError);
      }
      
      if (existingUsers && existingUsers.length > 0) {
        throw new Error("A client with this email already exists");
      }
      
      // Use the RPC function to create client user
      const { data: userId, error: functionError } = await supabase.rpc(
        'create_client_user',
        {
          admin_user_id: user.id,
          client_email: email.toLowerCase().trim(),
          client_password: password
        }
      );
      
      if (functionError) {
        console.error("Error creating client user via RPC:", functionError);
        throw new Error(functionError.message || "Failed to create client user account");
      }
      
      if (!userId) {
        throw new Error("User creation failed - no user ID returned");
      }
      
      console.log("Auth user created with ID:", userId);
      
      // Create the client record linked to the auth user
      const { data: clientData, error: clientError } = await supabase
        .from('clients')
        .insert({
          name,
          email: email.toLowerCase().trim(),
          company,
          phone,
          domain,
          user_id: userId
        })
        .select('*')
        .single();
        
      if (clientError) {
        console.error("Error creating client record:", clientError);
        throw clientError;
      }
      
      return { client: clientData, user_id: userId };
    } catch (error) {
      // If RPC fails, try direct Supabase auth signup as fallback
      console.error("Primary method failed, using fallback:", error);
      
      // Create auth user first
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: email.toLowerCase().trim(),
        password,
        options: {
          data: {
            role: 'client',
            name
          }
        }
      });
      
      if (authError) {
        console.error("Error creating auth user:", authError);
        throw authError;
      }
      
      if (!authData.user) {
        throw new Error("Auth user creation failed");
      }
      
      console.log("Auth user created with fallback method:", authData.user.id);
      
      // Create the client record
      const { data: clientData, error: clientError } = await supabase
        .from('clients')
        .insert({
          name,
          email: email.toLowerCase().trim(),
          company,
          phone,
          domain,
          user_id: authData.user.id
        })
        .select('*')
        .single();
        
      if (clientError) {
        console.error("Error creating client record:", clientError);
        throw clientError;
      }
      
      return { client: clientData, user_id: authData.user.id };
    }
  } catch (error) {
    console.error("Failed to create client with auth:", error);
    throw error;
  }
}
