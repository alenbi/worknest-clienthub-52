
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://xmyqiplgjcaxpnojdxmk.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhteXFpcGxnamNheHBub2pkeG1rIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMyMjQ4MjksImV4cCI6MjA1ODgwMDgyOX0.tzxkW_UrwoRP5P1WI8AtH_L92qXbVRsv8TZK-s3AaFk";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    storage: localStorage
  }
});

// Utility functions for common database operations

// Get client by email - using the new RPC function
export async function getClientByEmail(email: string) {
  if (!email) return null;
  
  try {
    const standardEmail = email.trim().toLowerCase();
    console.log("Getting client by email using RPC:", standardEmail);
    
    const { data, error } = await supabase
      .rpc('get_client_by_email', { email_param: standardEmail });
      
    if (error) {
      console.error("Error getting client by email:", error);
      throw error;
    }
    
    if (data && data.length > 0) {
      return data[0];
    }
    
    return null;
  } catch (error) {
    console.error("Failed to get client by email:", error);
    throw error;
  }
}

// Link existing auth user to client record if needed
export async function linkAuthUserToClient(userId: string, email: string) {
  if (!userId || !email) return null;
  
  try {
    const standardEmail = email.trim().toLowerCase();
    console.log("Linking auth user to client:", userId, standardEmail);
    
    // Find client by email
    const { data: client, error: clientError } = await supabase
      .from('clients')
      .select('*')
      .eq('email', standardEmail)
      .maybeSingle();
      
    if (clientError) {
      console.error("Error finding client by email:", clientError);
      throw clientError;
    }
    
    if (!client) {
      console.error("No client found with email:", standardEmail);
      return null;
    }
    
    // Update client with user_id if not already set
    if (!client.user_id) {
      console.log("Updating client with user_id:", userId);
      
      const { data: updatedClient, error: updateError } = await supabase
        .from('clients')
        .update({ user_id: userId })
        .eq('id', client.id)
        .select('*')
        .single();
        
      if (updateError) {
        console.error("Error updating client with user_id:", updateError);
        throw updateError;
      }
      
      console.log("Client updated successfully:", updatedClient);
      return updatedClient;
    }
    
    return client;
  } catch (error) {
    console.error("Failed to link auth user to client:", error);
    throw error;
  }
}
